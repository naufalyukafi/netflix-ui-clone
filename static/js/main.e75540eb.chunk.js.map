{"version":3,"sources":["config/axios.tsx","config/index.ts","config/Request.ts","pages/Banner/Banner.tsx","components/Nav/Nav.tsx","components/Row/Row.tsx","pages/Apps/App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","Config","API_KEY","BASE_URL","POSTER_PATH","Request","fetchTrending","CONFIG","fetchNetflixOriginals","fetchTopNetwork","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","Nav","isShow","setIsShow","window","addEventListener","scrollY","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","fecthData","map","poster_path","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e75540eb.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;","const Config = {\r\n    API_KEY: '2a83c52c8cf60a65f2a1ea91f0430e68',\r\n    BASE_URL: 'https://api.themoviedb.org/3',\r\n    POSTER_PATH: 'https://image.tmdb.org/t/p/original',\r\n}\r\n\r\nexport default Config;\r\n","import CONFIG from './index';\r\n\r\nconst Request = {\r\n    fetchTrending: `/trending/all/week?api_key=${CONFIG.API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${CONFIG.API_KEY}&with_networks=213`,\r\n    fetchTopNetwork: `/movie/top_rated?api_key=${CONFIG.API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${CONFIG.API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${CONFIG.API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${CONFIG.API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${CONFIG.API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${CONFIG.API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default Request;","import React, { useState, useEffect } from 'react'\r\nimport axios from '../../config/axios';\r\nimport Request from '../../config/Request';\r\nimport './Banner.css';\r\nimport { IMovie } from '../../helper/types';\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState<IMovie>();\r\n    \r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(Request.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length)\r\n            ]);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n    \r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: 'center center',\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\" >{movie?.title || movie?.name || movie?.original_name }</h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                    {movie?.overview}\r\n                </h1>\r\n            </div>\r\n            \r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const [ isShow, setIsShow ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                setIsShow(true);\r\n            } else setIsShow(false);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${isShow && \"nav__black\"}`}>\r\n            <img \r\n                className=\"nav__logo\"\r\n                src=\"./images/netflix-logo.png\" \r\n                alt=\"Netflix Logo\" \r\n            />\r\n            <img \r\n                className=\"nav__avatar\"\r\n                src=\"https://i.pinimg.com/736x/89/90/48/899048ab0cc455154006fdb9676964b3.jpg\" \r\n                alt=\"Account Logo\" \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from '../../config/axios';\r\nimport { IMovie, IRow } from '../../helper/types';\r\nimport \"./Row.css\";\r\nexport const POSTER_PATH = 'https://image.tmdb.org/t/p/original'\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow } : IRow) => {    \r\n    const [movies, setMovies] = useState<IMovie []>([]);\r\n\r\n    useEffect(() => {\r\n        async function fecthData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fecthData();\r\n    }, [fetchUrl])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map((movie) => (\r\n                    <img\r\n                        key={movie.id}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${POSTER_PATH}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name} \r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\nimport './App.css';\nimport Banner from '../Banner/Banner';\nimport Nav from '../../components/Nav/Nav';\nimport Request from '../../config/Request';\nimport Row from '../../components/Row/Row';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={Request.fetchNetflixOriginals} isLargeRow={true} />\n      <Row title=\"Trending Now\" fetchUrl={Request.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={Request.fetchTopNetwork} />\n      <Row title=\"Action Movies\" fetchUrl={Request.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={Request.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={Request.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={Request.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={Request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/Apps/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}